#[inline]
pub const fn as_u32_unaligned(slice: &[u8]) -> u32 {
    let ptr = slice.as_ptr() as *const u32;
    unsafe { ptr.read_unaligned() }
}

#[inline]
pub const fn as_u32(slice: &[u8]) -> u32 {
    unsafe { *(slice.as_ptr() as *const u32) }
}

#[test]
fn ptr() {
    let slice = [
        0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
        0x8, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6,
        0x7, 0x8, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8,
    ];
    let a = as_u32(&slice[0..]);
    assert_eq!(a, 0x04030201);
    // let b = as_u32(&slice[1..]); // ub
}
